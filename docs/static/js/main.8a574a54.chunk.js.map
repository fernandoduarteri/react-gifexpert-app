{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GrifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GrifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","onClick","cat","index","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,8BACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAMd,SACI,uBAAOO,YAAY,uBACfC,MAAOT,EACPU,SAjBI,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,e,+BCQhBG,EAhBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEOI,MAAMF,GAFb,cAENG,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MACI,CACIC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVjC,kBAcLM,GAdK,4CAAH,sDCWEO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCgBDO,EAlBE,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDP,SAACA,GAAa,IAAD,EAEXd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAiBrC,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGhB,CAACpB,IAGEqB,EDfcK,CAAa1B,GAA/BO,EAD4B,EAC5BA,KAAMa,EADsB,EACtBA,QAET,OACI,qCACI,6BAAKpB,IACJoB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACKT,EAAKE,KAAI,SAACC,GACP,OACI,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEW/BgB,EArBM,WAAO,IAAD,EACSzC,mBAAS,IADlB,mBACpB0C,EADoB,KACR3C,EADQ,KAMvB,OACI,gCACI,+CACA,uBACA,wBAAQ4C,QARF,WACd5C,EAAc,GAAD,mBAAK2C,GAAL,CAAgB,sBAOrB,iBACA,cAAC,EAAD,CAAa3C,cAAeA,IAC1B2C,EAAWnB,KAAI,SAACqB,EAAKC,GACnB,OACG,cAAC,EAAD,CAAuB/B,SAAW8B,GAAlBC,U,MCXnCC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.8a574a54.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({setcategories}) => {\n\n    const [InputValue, setInputValue] = useState('');\n\n    const handleValue = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(InputValue.trim().length >2){\n            setcategories(cats =>[InputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input placeholder=\"Pon aca la categoria\"\n                    value={InputValue}\n                    onChange={handleValue}\n                />\n            </form>\n        </div>\n    )\n}\nAddCategory.propTypes={\n    setcategories: PropTypes.func.isRequired\n}\nexport default AddCategory\n","const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZrR5taLJr2dVpSSffkAAXBtoh2HQDevR`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n        return (\n            {\n                id: img.id,\n                title: img.title,\n                url: img.images.downsized_medium.url\n            }\n        )\n    })\n    return gifs; \n}\nexport default getGifs\n","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GrifGrid = ({ category }) => {\nconst {data, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className=\"card-grid\">\n                {data.map((img) => {\n                    return (\n                        <GifGridItem key={img.id} {...img} />\n                    )\n                })}\n            </div>\n        </>\n    )\n}\n\nexport default GrifGrid\n","import { useEffect, useState } from \"react\"\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) =>{\n\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs =>{\n            setstate({\n                data:imgs,\n                loading:false\n            })\n        });\n     }, [category]);\n \n\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GrifGrid from './components/GrifGrid';\n\nconst GifExpertApp = () => {\nconst [categories, setcategories] = useState([])\nconst handleAdd = ()=>{\n    setcategories([...categories,\"Nueva Categoria\"]);\n}\n\n    return (\n        <div>\n            <h2>GiftExpertApp</h2>\n            <hr />\n            <button onClick={handleAdd}>Add</button>\n            <AddCategory setcategories={setcategories} />\n            { categories.map((cat, index)=>{\n                return(\n                   <GrifGrid key ={index} category ={cat} />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}